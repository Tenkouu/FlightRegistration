@page "/flightdisplay"
@using FlightRegistration.BlazorDisplay.Services
@inject FlightDisplayService FlightService
@implements IDisposable

<PageTitle>Flight Departures</PageTitle>

<h3>✈️ Flight Departures</h3>

@if (FlightService.CurrentFlights == null || !FlightService.CurrentFlights.Any())
{
    if (isLoading)
    {
        <p><em>Loading flight information...</em></p>
    }
    else
    {
        <p><em>No flight information available at the moment.</em></p>
    }
}
else
{
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Flight No.</th>
                <th>Departure</th>
                <th>Arrival</th>
                <th>Scheduled Time</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in FlightService.CurrentFlights.OrderBy(f => f.DepartureTime))
            {
                <tr class="@GetStatusRowClass(flight.Status)">
                    <td>@flight.FlightNumber</td>
                    <td>@flight.DepartureCity</td>
                    <td>@flight.ArrivalCity</td>
                    <td>@flight.DepartureTime.ToShortTimeString() (@flight.DepartureTime.ToShortDateString())</td>
                    <td><strong>@flight.Status.ToString()</strong></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        FlightService.OnFlightsUpdated += StateHasChanged; // Subscribe to updates
        await FlightService.InitializeAsync(); // Initialize service (loads initial data & connects SignalR)
        isLoading = false;
    }

    private string GetStatusRowClass(FlightRegistration.Core.Models.FlightStatus status)
    {
        return status switch
        {
            FlightRegistration.Core.Models.FlightStatus.Departed => "table-secondary text-muted",
            FlightRegistration.Core.Models.FlightStatus.Cancelled => "table-danger",
            FlightRegistration.Core.Models.FlightStatus.Delayed => "table-warning",
            FlightRegistration.Core.Models.FlightStatus.Boarding => "table-success",
            _ => ""
        };
    }

    public void Dispose()
    {
        FlightService.OnFlightsUpdated -= StateHasChanged; // Unsubscribe
        // FlightDisplayService itself handles HubConnection disposal via IAsyncDisposable
    }
}