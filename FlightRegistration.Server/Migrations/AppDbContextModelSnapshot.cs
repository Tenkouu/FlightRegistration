// <auto-generated />
using System;
using FlightRegistration.Services.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightRegistration.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FlightRegistration.Core.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssignedSeatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedSeatId")
                        .IsUnique();

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArrivalCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartureCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalCity = "Tokyo (NRT)",
                            ArrivalTime = new DateTime(2024, 9, 1, 16, 0, 0, 0, DateTimeKind.Utc),
                            DepartureCity = "Ulaanbaatar (UBN)",
                            DepartureTime = new DateTime(2024, 9, 1, 10, 30, 0, 0, DateTimeKind.Utc),
                            FlightNumber = "MG101",
                            Status = 0,
                            TotalSeats = 2
                        },
                        new
                        {
                            Id = 2,
                            ArrivalCity = "Ulaanbaatar (UBN)",
                            ArrivalTime = new DateTime(2024, 9, 5, 17, 0, 0, 0, DateTimeKind.Utc),
                            DepartureCity = "Seoul (ICN)",
                            DepartureTime = new DateTime(2024, 9, 5, 14, 0, 0, 0, DateTimeKind.Utc),
                            FlightNumber = "MG202",
                            Status = 0,
                            TotalSeats = 150
                        });
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlightId = 1,
                            IsReserved = false,
                            SeatNumber = "1A"
                        },
                        new
                        {
                            Id = 2,
                            FlightId = 1,
                            IsReserved = false,
                            SeatNumber = "1B"
                        },
                        new
                        {
                            Id = 3,
                            FlightId = 1,
                            IsReserved = false,
                            SeatNumber = "2A"
                        },
                        new
                        {
                            Id = 4,
                            FlightId = 1,
                            IsReserved = false,
                            SeatNumber = "2B"
                        },
                        new
                        {
                            Id = 5,
                            FlightId = 2,
                            IsReserved = false,
                            SeatNumber = "1A"
                        },
                        new
                        {
                            Id = 6,
                            FlightId = 2,
                            IsReserved = false,
                            SeatNumber = "1B"
                        },
                        new
                        {
                            Id = 7,
                            FlightId = 2,
                            IsReserved = false,
                            SeatNumber = "1C"
                        });
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Booking", b =>
                {
                    b.HasOne("FlightRegistration.Core.Models.Seat", "AssignedSeat")
                        .WithOne("ReservedByBooking")
                        .HasForeignKey("FlightRegistration.Core.Models.Booking", "AssignedSeatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FlightRegistration.Core.Models.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightRegistration.Core.Models.Passenger", "Passenger")
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedSeat");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Seat", b =>
                {
                    b.HasOne("FlightRegistration.Core.Models.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Flight", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Passenger", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlightRegistration.Core.Models.Seat", b =>
                {
                    b.Navigation("ReservedByBooking");
                });
#pragma warning restore 612, 618
        }
    }
}
